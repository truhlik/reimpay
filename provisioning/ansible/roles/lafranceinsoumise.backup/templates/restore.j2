#!/bin/bash

# This file was generated by Ansible for {{ ansible_fqdn }}
# Do NOT modify this file by hand!

WORKDIR={{ backup_work }}/{{ item.name }}

{% if item.source.startswith('postgresql://') %}

DBNAME={{ item.source.split('postgresql://')[-1]}}
psql {{ ('-U %s' % backup_postgres_user) if backup_postgres_user else '' }} {{ ('-h %s' % backup_postgres_host) if backup_postgres_host else ''}} {{ ('-p %s' % backup_postgres_port) if backup_postgres_port else ''}} $DBNAME < $WORKDIR/dump
rm -rf $WORKDIR/dump

{% elif item.source.startswith('mysql://') %}

{% if item.source == 'mysql://' %}
# Restore all databases
mysql {{ '-u %s' % backup_mysql_user if backup_mysql_user else '' }} {{ '-p%s' % (backup_mysql_pass|quote) if backup_mysql_pass else '' }} < ${WORKDIR}/dump
{% else %}
# Restore the passed database
DBNAME={{ item.source.split('mysql://')[-1]}}
mysql {{ '-u %s' % backup_mysql_user if backup_mysql_user else '' }} {{ '-p%s' % (backup_mysql_pass|quote) if backup_mysql_pass else '' }} $DBNAME  < ${WORKDIR}/dump
rm -rf $WORKDIR/dump
{% endif %}

{% elif item.source.startswith('mongo://') %}

mongorestore --drop $WORKDIR/dump
rm -rf $WORKDIR/dump

{% elif item.source.startswith('redis://') %}

if [$(cat /etc/redis/redis.conf |grep 'appendonly '|cut -d' ' -f2) != "no"]
then
    echo "Does not work with AOF mode enabled"
    exit 1
fi

systemctl start redis-server.service
REDIS_DB=$(redis-cli --raw config get dir | tail -1)/$(redis-cli --raw config get dbfilename | tail -1)
systemctl stop redis-server.service
mv $REDIS_DB $REDIS_DB.back
mv $WORKDIR/dump $REDIS_DB
chown {{ backup_redis_user }}:{{ backup_redis_group }} $REDIS_DB
systemctl start redis-server.service

{% endif %}

{% for action in item.restore_actions|default([]) %}
{{ action }}
{% endfor %}
